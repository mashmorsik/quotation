// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/mashmorsik/quotation/pkg/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddQuotation mocks base method.
func (m *MockRepository) AddQuotation(q *models.Quote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuotation", q)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQuotation indicates an expected call of AddQuotation.
func (mr *MockRepositoryMockRecorder) AddQuotation(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuotation", reflect.TypeOf((*MockRepository)(nil).AddQuotation), q)
}

// AddQuotePair mocks base method.
func (m *MockRepository) AddQuotePair(from, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuotePair", from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQuotePair indicates an expected call of AddQuotePair.
func (mr *MockRepositoryMockRecorder) AddQuotePair(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuotePair", reflect.TypeOf((*MockRepository)(nil).AddQuotePair), from, to)
}

// GetLastUpdated mocks base method.
func (m *MockRepository) GetLastUpdated(from, to string) (*models.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUpdated", from, to)
	ret0, _ := ret[0].(*models.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUpdated indicates an expected call of GetLastUpdated.
func (mr *MockRepositoryMockRecorder) GetLastUpdated(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUpdated", reflect.TypeOf((*MockRepository)(nil).GetLastUpdated), from, to)
}

// GetQuotation mocks base method.
func (m *MockRepository) GetQuotation(id uuid.UUID) (*models.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotation", id)
	ret0, _ := ret[0].(*models.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotation indicates an expected call of GetQuotation.
func (mr *MockRepositoryMockRecorder) GetQuotation(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotation", reflect.TypeOf((*MockRepository)(nil).GetQuotation), id)
}

// GetQuotePairs mocks base method.
func (m *MockRepository) GetQuotePairs() ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotePairs")
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotePairs indicates an expected call of GetQuotePairs.
func (mr *MockRepositoryMockRecorder) GetQuotePairs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotePairs", reflect.TypeOf((*MockRepository)(nil).GetQuotePairs))
}
